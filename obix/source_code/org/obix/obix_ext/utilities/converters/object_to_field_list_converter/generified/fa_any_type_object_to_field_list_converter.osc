factory any_type_object_to_field_list_converter type:any_type_object_to_field_list_converter

	attribute_list private:yes
		attribute type_attribute_list type:type_attribute_list voidable:yes end
	end

	command convert
		script
			if a_type_attribute_list =r void then
				o_result = fa_indexed_any_type_list.create_singleton ( i_object )
			else
				const mutable_indexed_any_type_list list = fa_mutable_indexed_any_type_list.create
				repeat for each type_attribute attribute in a_type_attribute_list
					c_list.append ( se_reflection.get_attribute_value_of_object.result ( &
						object = i_object &
						attribute_id = c_attribute.id ) )
				end repeat
				o_result = c_list.make_immutable
			end if
		end
	end

	creator create
		in type type:type end
		in include_readonly_attributes type:yes_no default:no end
		
		out result type:any_type_object_to_field_list_converter end
		
		script
			se_object_field_description_utilities.create_map_for_type_attributes ( &
				type = i_type &
				include_readonly_attributes = i_include_readonly_attributes ) &
				( o_result.field_description_map = result &
				o_result.type_attribute_list = type_attribute_list )
		end
	end
	
	creator create_for_single_field
		in field_type type:type_id_path end
		in field_id type:simple_non_empty_string voidable:yes default:void end
		in field_label type:any_type voidable:yes default:void end
		
		out result type:any_type_object_to_field_list_converter end
		
		script
			o_result.field_description_map = se_object_field_description_utilities.create_singleton_map ( &
				field_type = i_field_type &
				field_id = i_field_id &
				field_label = i_field_label )
			o_result.type_attribute_list = void
		end
	end

end