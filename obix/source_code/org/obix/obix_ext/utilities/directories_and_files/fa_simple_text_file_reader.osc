///
   Copyright (C) 2009-2012 Christian Neumanns (www.rps-obix.com)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

factory simple_text_file_reader type:simple_text_file_reader

	java_header
		import java.io.BufferedReader;
		import java.io.FileInputStream;
		import java.io.InputStreamReader;
		import java.io.IOException;

		import org.obix.obix_core.java.se_java_IO;
		import org.obix.obix_core.java.fa_java_exception;
	end java_header
	
	java
		BufferedReader a_reader;
	end java

	command read_character
		script
			var java_exception java_exception

			java
				try {
					int v_input = a_reader.read() ;
					if ( v_input != -1 ) {
						o_result = new fa_string ( String.valueOf ( (char) v_input ) );
					}
				}
				catch ( IOException e ) {
					v_java_exception = new fa_java_exception ( e );
				}
			end java
			
			if v_java_exception #r void then
				o_error = fa_resource_error.create ( &
					description = """Could not read from file '{{a_file}}'. The following error occured:
{{v_java_exception.message}}""" &
					java_exception = v_java_exception &
					resource = a_file )
				i_error_handler.handle_system_error ( o_error )
			end if
		end
		test
			script
				const file file = se_text_file_IO.create_temporary_text_file.result ( &
					delete_file_on_exit = yes &
					text = "a1!" )
				
				var simple_text_file_reader to = fa_simple_text_file_reader.create ( file = c_file )
				
				verify to.read_character.result =v "a"
				verify to.read_character.result =v "1"
				verify to.read_character.result =v "!"
				verify to.read_character.result =r void

				to.close
			end
		end
	end

	command read_line
		script
			var java_exception java_exception

			java
				try {
					String v_input = a_reader.readLine() ;
					if ( v_input != null ) {
						o_result = new fa_string ( v_input );
					}
				}
				catch ( IOException e ) {
					v_java_exception = new fa_java_exception ( e );
				}
			end java
			
			if v_java_exception #r void then
				o_error = fa_resource_error.create ( &
					description = """Could not read from file '{{a_file}}'. The following error occured:
{{v_java_exception.message}}""" &
					java_exception = v_java_exception &
					resource = a_file )
				i_error_handler.handle_system_error ( o_error )
			end if
		end
		test
			script
				const file file = se_text_file_IO.create_temporary_text_file.result ( &
					delete_file_on_exit = yes &
					text = '''line 1
line 2

line 3''' )
				
				var simple_text_file_reader to = fa_simple_text_file_reader.create ( file = c_file )
				
				verify to.read_line.result =v "line 1"
				verify to.read_line.result =v "line 2"
				verify to.read_line.result =v ""
				verify to.read_line.result =v "line 3"
				verify to.read_line.result =r void

				to.close
				
				se_text_file_IO.store_string_to_existing_file ( &
					string = '''line 1
line 2
''' &
					file = c_file )

				to = fa_simple_text_file_reader.create ( file = c_file )
				
				verify to.read_line.result =v "line 1"
				verify to.read_line.result =v "line 2"
				// verify to.read_line.result =v ""
				verify to.read_line.result =r void

				to.close

				se_text_file_IO.store_string_to_existing_file ( &
					string = '''line 1
line 2

''' &
					file = c_file )

				to = fa_simple_text_file_reader.create ( file = c_file )
				
				verify to.read_line.result =v "line 1"
				verify to.read_line.result =v "line 2"
				verify to.read_line.result =v ""
				verify to.read_line.result =r void

				to.close
			end
		end
	end

	command read_all
		script
			var java_exception java_exception

			java
				try {
					char[] v_buffer = new char[se_java_IO.default_IO_buffer_size] ;
					StringBuilder v_string_builder = new StringBuilder ( se_java_IO.default_IO_buffer_size ) ;
					int v_length ;
					while ( ( v_length = a_reader.read ( v_buffer ) ) != -1 ) {
						v_string_builder.append ( v_buffer, 0, v_length ) ;
					}
					// if ( v_string_builder.length() > 0 ) {
						o_result = new fa_string ( v_string_builder.toString() ) ;
					// }
				}

				catch ( IOException e ) {
					v_java_exception = new fa_java_exception ( e );
				}

				finally {
					if ( i_close_after_reading.java_value() ) {
						a_reader.close();
					}
				}
			end java
			
			if v_java_exception #r void then
				o_error = fa_resource_error.create ( &
					description = """Could not read from file '{{a_file}}'. The following error occured:
{{v_java_exception.message}}""" &
					java_exception = v_java_exception &
					resource = a_file )
				i_error_handler.handle_system_error ( o_error )
			end if
		end
		test
			script
				var string file_content = '''line 1
line 2

line 3'''
				const file file = se_text_file_IO.create_temporary_text_file.result ( &
					delete_file_on_exit = yes &
					text = file_content )
				
				var simple_text_file_reader to = fa_simple_text_file_reader.create ( file = c_file )
				verify to.read_all.result compare =v file_content
				to.close

				se_text_file_IO.store_string_to_existing_file ( &
					string = "" &
					file = c_file )
				to = fa_simple_text_file_reader.create ( file = c_file )
				verify to.read_all.result compare =v ""
				to.close
			end
		end
	end

	command close
		script
			var java_exception java_exception

			java
				try {
					// se_java_IO.close_reader ( a_reader );
					a_reader.close();
				}
				catch ( IOException e ) {
					v_java_exception = new fa_java_exception ( e );
				}
			end java
			
			if v_java_exception #r void then
				o_error = fa_resource_error.create ( &
					description = """Could not close system's standard in. The following error occured:
{{v_java_exception.message}}""" &
					java_exception = v_java_exception &
					resource = a_file )
				i_error_handler.handle_system_error ( o_error )
			end if
		end
	end
	
	creator create kind:in_all
		script
			o_result.file = i_file
			o_result.character_set = i_character_set

			java
				FileInputStream file_input_stream = new FileInputStream ( i_file.getValue().java_value() );
				InputStreamReader input_stream_reader = 
					i_character_set == null ?
					new InputStreamReader ( file_input_stream ) :
					new InputStreamReader ( file_input_stream, i_character_set.getValue().java_value() ) ;
				o_result.a_reader = new BufferedReader ( input_stream_reader ) ;
			end java
		end
	end

	test
		script
			const file file = se_text_file_IO.create_temporary_text_file.result ( &
				delete_file_on_exit = yes &
				text = '''line 1
line 2
line 3''' )
			
			// var simple_text_file_reader to = fa_simple_text_file_reader.create ( file = c_file )
			var simple_text_file_reader to = fa_simple_text_file_reader.create ( file = fa_file.create ( c_file.value ) )
			
			verify to.read_character.result =v "l"
			verify to.read_line.result =v "ine 1"
			verify to.read_all.result ( close_after_reading = no ) =v '''line 2
line 3'''
			verify to.read_line.result =r void

			to.close
		end
	end

end factory